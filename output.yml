AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: VF Deployment
Parameters:
  BucketName:
    Type: String
Resources:
  S3:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      BucketName:
        Ref: BucketName
      WebsiteConfiguration:
        IndexDocument: index.html
  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: BucketName
      PolicyDocument:
        Statement:
        - Action:
          - s3:GetObject
          Effect: Allow
          Principal: '*'
          Resource:
            Fn::Sub: arn:aws:s3:::${BucketName}/*
  API:
    Type: AWS::Serverless::Api
    Properties:
      StageName: test
  weather:
    Type: AWS::Serverless::Function
    Properties:
      InlineCode: "const http = require('https')\nexports.handler = async (event)\
        \ => {\n    return httprequest().then((data) => {\n        const response\
        \ = {\n            statusCode: 200,\n            headers: {\n            \"\
        Access-Control-Allow-Headers\" : \"Access-Control-Allow-Methods, Access-Control-Allow-Headers,\
        \ Access-Control-Allow-Origin, Origin,Accept, X-Requested-With, Content-Type,\
        \ Access-Control-Request-Method, Access-Control-Request-Headers\",\n     \
        \       \"Access-Control-Allow-Origin\": \"*\",\n            \"Access-Control-Allow-Methods\"\
        : \"OPTIONS,POST,GET\"\n        },\n            body: JSON.stringify(data),\n\
        \        };\n    return response;\n    });\n};\nfunction httprequest() {\n\
        \     return new Promise((resolve, reject) => {\n        const options = {\n\
        \            host: 'api.openweathermap.org',\n            path: '/data/2.5/weather?q=Tulsa&units=Imperial&appid=92c778350883d551ce42f1cabbba902c',\n\
        \            port: 443,\n            method: 'GET'\n        };\n        const\
        \ req = http.request(options, (res) => {\n          if (res.statusCode < 200\
        \ || res.statusCode >= 300) {\n                return reject(new Error('statusCode='\
        \ + res.statusCode));\n            }\n            var body = [];\n       \
        \     res.on('data', function(chunk) {\n                body.push(chunk);\n\
        \            });\n            res.on('end', function() {\n               \
        \ try {\n                    body = JSON.parse(Buffer.concat(body).toString());\n\
        \                } catch(e) {\n                    reject(e);\n          \
        \      }\n                resolve(body);\n            });\n        });\n \
        \       req.on('error', (e) => {\n          reject(e.message);\n        });\n\
        \       req.end();\n    });\n}\n"
      Handler: index.handler
      Runtime: nodejs12.x
      CodeUri: s3://voicefoundry123/4fe448ecebea6f6d4c0b639bba8bf2bb
      Description: Weather
      MemorySize: 512
      Timeout: 10
      Role: arn:aws:iam::575473820147:role/service-role/weather-role-1zekfdcw
      Events:
        Api1:
          Type: Api
          Properties:
            Path: /weather2
            Method: ANY
            RestApiId:
              Ref: API
  DeploymentLayer:
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:375983427419:applications/deploy-to-s3
        SemanticVersion: 2.4.2
  SiteSource:
    Type: AWS::Serverless::Function
    Properties:
      Layers:
      - Fn::GetAtt:
        - DeploymentLayer
        - Outputs.Arn
      CodeUri: s3://voicefoundry123/bc038958de88f3f6ce08fc5990244570
      AutoPublishAlias: live
      Runtime: python3.6
      Handler: deployer.resource_handler
      Timeout: 600
      Policies:
      - S3FullAccessPolicy:
          BucketName:
            Ref: S3
  DeploymentResource:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken:
        Fn::GetAtt:
        - SiteSource
        - Arn
      Version:
        Ref: SiteSource.Version
      TargetBucket:
        Ref: S3
      Substitutions:
        FilePattern: main.js
        Values:
          API_ENDPOINT:
            Fn::Sub: https://${API}.execute-api.${AWS::Region}.amazonaws.com/test/weather2
      Acl: public-read
      CacheControlMaxAge: 600
Outputs:
  DestinationBucket:
    Value:
      Ref: S3
  DestinationUrl:
    Value:
      Fn::GetAtt:
      - S3
      - WebsiteURL
  APIServiceToken:
    Value:
      Fn::GetAtt:
      - weather
      - Arn
  URL:
    Value:
      Fn::Sub: https://${API}.execute-api.${AWS::Region}.amazonaws.com/test/weather2
