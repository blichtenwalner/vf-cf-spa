AWSTemplateFormatVersion: 2010-09-09
Transform: 'AWS::Serverless-2016-10-31'
Description: VF Deployment

Parameters:
  BucketName:
    Type: String

Resources:
  S3:
    Type: "AWS::S3::Bucket"
    Properties:
      AccessControl: PublicRead
      BucketName: !Ref BucketName
      WebsiteConfiguration:
        IndexDocument: index.html
  S3BucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref BucketName
      PolicyDocument:
        Statement:
          -
            Action: [ "s3:GetObject" ]
            Effect: Allow
            Principal: "*"
            Resource: !Sub "arn:aws:s3:::${BucketName}/*"

  API:
    Type: "AWS::Serverless::Api"
    Properties:
      StageName: "test"
  weather:
    Type: 'AWS::Serverless::Function'
    Properties:
      InlineCode: |
        const http = require('https')
        exports.handler = async (event) => {
            return httprequest().then((data) => {
                const response = {
                    statusCode: 200,
                    headers: {
                    "Access-Control-Allow-Headers" : "Access-Control-Allow-Methods, Access-Control-Allow-Headers, Access-Control-Allow-Origin, Origin,Accept, X-Requested-With, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers",
                    "Access-Control-Allow-Origin": "*",
                    "Access-Control-Allow-Methods": "OPTIONS,POST,GET"
                },
                    body: JSON.stringify(data),
                };
            return response;
            });
        };
        function httprequest() {
             return new Promise((resolve, reject) => {
                const options = {
                    host: 'api.openweathermap.org',
                    path: '/data/2.5/weather?q=Tulsa&units=Imperial&appid=92c778350883d551ce42f1cabbba902c',
                    port: 443,
                    method: 'GET'
                };
                const req = http.request(options, (res) => {
                  if (res.statusCode < 200 || res.statusCode >= 300) {
                        return reject(new Error('statusCode=' + res.statusCode));
                    }
                    var body = [];
                    res.on('data', function(chunk) {
                        body.push(chunk);
                    });
                    res.on('end', function() {
                        try {
                            body = JSON.parse(Buffer.concat(body).toString());
                        } catch(e) {
                            reject(e);
                        }
                        resolve(body);
                    });
                });
                req.on('error', (e) => {
                  reject(e.message);
                });
               req.end();
            });
        }
      Handler: index.handler
      Runtime: nodejs12.x
      CodeUri: .
      Description: >-
        Weather
      MemorySize: 512
      Timeout: 10
      Role: 'arn:aws:iam::575473820147:role/service-role/weather-role-1zekfdcw'
      Events:
        Api1:
          Type: Api
          Properties:
            Path: /weather2
            Method: ANY
            RestApiId: !Ref API

  DeploymentLayer:
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:375983427419:applications/deploy-to-s3
        SemanticVersion: 2.4.2

  SiteSource:
    Type: AWS::Serverless::Function
    Properties:
      Layers:
        - !GetAtt DeploymentLayer.Outputs.Arn
      CodeUri: voice/
      AutoPublishAlias: live
      Runtime: python3.6 
      Handler: deployer.resource_handler
      Timeout: 600
      Policies:
        - S3FullAccessPolicy:
            BucketName: !Ref S3

  DeploymentResource:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt SiteSource.Arn
      Version: !Ref "SiteSource.Version"
      TargetBucket: !Ref S3
      Substitutions:
        FilePattern: "main.js"
        Values:
          API_ENDPOINT: !Sub https://${API}.execute-api.${AWS::Region}.amazonaws.com/test/weather2
      Acl: 'public-read'
      CacheControlMaxAge: 600


Outputs:
  DestinationBucket:
    Value: !Ref S3
  DestinationUrl:
    Value: !GetAtt S3.WebsiteURL
  APIServiceToken:
    Value: !GetAtt weather.Arn
  URL:
    Value: !Sub https://${API}.execute-api.${AWS::Region}.amazonaws.com/test/weather2
